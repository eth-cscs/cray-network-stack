FROM docker.io/nvidia/cuda:12.8.0-devel-ubuntu24.04

ARG OMPI_VER=5.0.6
ARG GDRCOPY_VER=2.4.4

RUN apt-get update \
    && DEBIAN_FRONTEND=noninteractive \
       apt-get install -y \
        build-essential \
        ca-certificates \
        pkg-config \
        automake \
        autoconf \
        libtool \
        cmake \
        gdb \
        strace \
        wget \
        git \
        bzip2 \
        python3 \
        rdma-core \
        numactl \
        libconfig-dev \
        libuv1-dev \
        libucx-dev \
        libfuse-dev \
        libfuse3-dev \
        libyaml-dev \
        libnl-3-dev \
        libnuma-dev \
        libsensors-dev \
        libcurl4-openssl-dev \
        libjson-c-dev \
        libibverbs-dev \
        --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

RUN git clone --depth 1 -b v${GDRCOPY_VER} https://github.com/NVIDIA/gdrcopy.git && \
    cd gdrcopy && \
    export CUDA_PATH=${CUDA_HOME:-$(echo $(which nvcc) | grep -o '.*cuda')} && \
    make CC=gcc CUDA=$CUDA_PATH lib && \
    make lib_install && \
    cd ../ && rm -rf gdrcopy

RUN git clone --depth 1 https://github.com/HewlettPackard/shs-cassini-headers.git \
    && cd shs-cassini-headers \
    && cp -r include/* /usr/include/ \
    && cp -r share/* /usr/share/ \
    && cd .. \
    && rm -r shs-cassini-headers

RUN git clone --depth 1 https://github.com/HewlettPackard/shs-cxi-driver.git \
    && cd shs-cxi-driver \
    && cp -r include/* /usr/include/ \
    && cd .. \
    && rm -r shs-cxi-driver

RUN git clone --depth 1 https://github.com/HewlettPackard/shs-libcxi.git \
    && cd shs-libcxi \
    && git checkout release/shs-12.0 \
    && ./autogen.sh \
    && ./configure --prefix=/usr --with-cuda=/usr/local/cuda \
    && make -j$(nproc) \
    && make install \
    && ldconfig \
    && cd .. \
    && rm -r shs-libcxi

# Install libfabric
# Libfabric 2.0.0 seems to have a bug preventing compilation of the CXI provider, using main branch for now
ARG libfabric_version=main
RUN git clone --depth 1 --branch ${libfabric_version} https://github.com/ofiwg/libfabric.git \
    && cd libfabric \
    && ./autogen.sh \
    && ./configure --prefix=/usr --with-cuda=/usr/local/cuda --enable-cuda-dlopen --enable-gdrcopy-dlopen --enable-cxi --enable-lnx --enable-efa \
    && make -j$(nproc) \
    && make install \
    && ldconfig \
    && cd .. \
    && rm -rf libfabric

# Install OpenMPI
RUN wget -q https://download.open-mpi.org/release/open-mpi/v5.0/openmpi-${OMPI_VER}.tar.gz \
    && tar xf openmpi-${OMPI_VER}.tar.gz \
    && cd openmpi-${OMPI_VER} \
    && ./configure --with-ofi=/usr --with-gdrcopy=/usr/local --prefix=/usr --with-cxi --with-slingshot --enable-oshmem \
       --with-cuda=/usr/local/cuda --with-cuda-libdir=/usr/local/cuda/lib64/stubs \
    && make -j$(nproc) \
    && make install \
    && ldconfig \
    && cd .. \
    && rm -rf openmpi-${OMPI_VER}.tar.gz openmpi-${OMPI_VER}

# Download pre-built benchmarks package
RUN wget -q --progress=bar:force https://developer.download.nvidia.com/compute/nvidia-hpc-benchmarks/redist/nvidia_hpc_benchmarks_openmpi/linux-sbsa/nvidia_hpc_benchmarks_openmpi-linux-sbsa-24.09.02-archive.tar.xz \
    && tar xf nvidia_hpc_benchmarks_openmpi-linux-sbsa-24.09.02-archive.tar.xz \
    && mv nvidia_hpc_benchmarks_openmpi-linux-sbsa-24.09.02-archive nvidia_hpc_benchmarks \
    && rm nvidia_hpc_benchmarks_openmpi-linux-sbsa-24.09.02-archive.tar.xz

# Build NVSHMEM from source
RUN wget -q https://developer.download.nvidia.com/compute/redist/nvshmem/2.11.0/source/nvshmem_src_2.11.0-5.txz \
    && tar -xvJf nvshmem_src_2.11.0-5.txz \
    && cd nvshmem_src_2.11.0-5 \
    && NVSHMEM_DEBUG=0 \
       NVSHMEM_DEVEL=0 \
       NVSHMEM_DEFAULT_PMI2=0 \
       NVSHMEM_DEFAULT_PMIX=0 \
       NVSHMEM_DISABLE_COLL_POLL=1 \
       NVSHMEM_ENABLE_ALL_DEVICE_INLINING=0 \
       NVSHMEM_GPU_COLL_USE_LDST=0 \
       NVSHMEM_LIBFABRIC_SUPPORT=1 \
       NVSHMEM_MPI_SUPPORT=1 \
       NVSHMEM_MPI_IS_OMPI=1 \
       NVSHMEM_NVTX=1 \
       NVSHMEM_PMIX_SUPPORT=1 \
       NVSHMEM_SHMEM_SUPPORT=1 \
       NVSHMEM_TEST_STATIC_LIB=0 \
       NVSHMEM_TIMEOUT_DEVICE_POLLING=0 \
       NVSHMEM_TRACE=0 \
       NVSHMEM_USE_DLMALLOC=0 \
       NVSHMEM_USE_NCCL=1 \
       NVSHMEM_USE_GDRCOPY=1 \
       NVSHMEM_VERBOSE=0 \
       NVSHMEM_DEFAULT_UCX=0 \
       NVSHMEM_UCX_SUPPORT=0 \
       NVSHMEM_IBGDA_SUPPORT=0 \
       NVSHMEM_IBGDA_SUPPORT_GPUMEM_ONLY=0 \
       NVSHMEM_IBDEVX_SUPPORT=0 \
       NVSHMEM_IBRC_SUPPORT=0 \
       LIBFABRIC_HOME=/usr \
       NCCL_HOME=/usr \
       GDRCOPY_HOME=/usr/local \
       MPI_HOME=/usr \
       SHMEM_HOME=/usr \
       cmake . \
       && make -j$(nproc) \
       && make install

# Replace pre-built NVSHMEM shipped with the benchmarks with the one we just built
RUN rm -r /nvidia_hpc_benchmarks/lib/nvshmem \
    && cp -R /usr/local/nvshmem/lib /nvidia_hpc_benchmarks/lib/nvshmem

WORKDIR /nvidia_hpc_benchmarks
